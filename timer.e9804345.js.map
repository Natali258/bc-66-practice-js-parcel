{"mappings":"ACAc,CAAA,CACZ,WAAY,KACZ,KAAM,CAAC,EACP,cAAe,CACb,KAAM,CAAC,OAAQ,MAAO,OAAO,CAC7B,MAAO,CAAC,SAAU,SAAU,QAAQ,CACpC,QAAS,CAAC,UAAW,UAAW,SAAS,CACzC,QAAS,CAAC,UAAW,UAAW,SAAS,AAC3C,EAEA,MAAM,CAAY,CAAE,CAAU,EAC5B,IAAM,EAAS,IAAI,KAAK,GACpB,EAAQ,EAAS,KAAK,GAAG,GAC7B,GAAI,GAAS,EAAG,CACd,MAAM,yBACN,MACF,CACA,IAAI,CAAC,OAAO,CAAC,GAEb,IAAI,CAAC,UAAU,CAAG,YAAY,KAE5B,GAAI,AADJ,CAAA,EAAQ,EAAS,KAAK,GAAG,EAAzB,GACa,EAAG,CACd,MAAM,mBACN,cAAc,IAAI,CAAC,UAAU,EAC7B,MACF,CACA,IAAM,EAAO,IAAI,CAAC,SAAS,CAAC,GAC5B,IAAI,CAAC,iBAAiB,CAAC,EACzB,EAAG,IACL,EACA,QAAQ,CAAY,EAClB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAG,SAAS,aAAa,CAAC,CAAC,CAAC,EAAE,EAAa,CAAC,CAC7D,EACA,UAAA,AAAU,GAKD,CAAA,CAAE,KAJI,KAAK,KAAK,CAAC,EAAO,IAAO,GAAK,GAAK,IAIjC,MAHD,KAAK,KAAK,CAAC,EAAO,IAAO,GAAK,IAAM,GAG5B,QAFN,KAAK,KAAK,CAAC,EAAO,IAAO,IAAM,GAEhB,QADf,KAAK,KAAK,CAAC,EAAO,KAAQ,EACH,CAAA,EAEzC,kBAAkB,CAAI,EACpB,OAAO,OAAO,CAAC,GAAM,OAAO,CAAC,CAAC,CAAC,EAAK,EAAM,CAAE,KAC1C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAM,CAAC,WAAW,CAAG,IAAI,CAAC,cAAc,CAAC,GAClE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAM,CAAC,OAAO,CAAC,KAAK,CAAG,IAAI,CAAC,eAAe,CAClE,EACA,EAEJ,EACF,EACA,eAAA,AAAe,GACN,OAAO,GAAO,QAAQ,CAAC,EAAG,GAGnC,gBAAgB,CAAK,CAAE,CAAG,EACxB,OAAO,IAAI,CAAC,aAAa,CAAC,EAAI,CAC5B,EAAQ,IAAM,GAAK,EAAQ,IAAM,GAC7B,EACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,CAAC,EAAQ,GAAK,EAAI,EAAQ,GAAK,EAAE,CACxD,AACH,CACF,CAAA,EAEM,KAAK,CAAC,eAAgB","sources":["<anon>","src/js/timer.js"],"sourcesContent":["var $7e81353768b819eb$exports = {};\nconst $7e81353768b819eb$var$timer = {\n    intervalId: null,\n    refs: {},\n    datasetValues: {\n        days: [\n            \"\\u0434\\u0435\\u043D\\u044C\",\n            \"\\u0434\\u043D\\u044F\",\n            \"\\u0434\\u043D\\u0456\\u0432\"\n        ],\n        hours: [\n            \"\\u0433\\u043E\\u0434\\u0438\\u043D\\u0430\",\n            \"\\u0433\\u043E\\u0434\\u0438\\u043D\\u0438\",\n            \"\\u0433\\u043E\\u0434\\u0438\\u043D\"\n        ],\n        minutes: [\n            \"\\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\\u0430\",\n            \"\\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\\u0438\",\n            \"\\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\"\n        ],\n        seconds: [\n            \"\\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\\u0430\",\n            \"\\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\\u0438\",\n            \"\\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"\n        ]\n    },\n    start (rootSelector, targetDate) {\n        const target = new Date(targetDate);\n        let delta = target - Date.now();\n        if (delta <= 0) {\n            alert(\"Select date in future\");\n            return;\n        }\n        this.getRefs(rootSelector);\n        this.intervalId = setInterval(()=>{\n            delta = target - Date.now();\n            if (delta <= 0) {\n                alert(\"Success dedline\");\n                clearInterval(this.intervalId);\n                return;\n            }\n            const date = this.convertMS(delta);\n            this.updateTextContent(date);\n        }, 1000);\n    },\n    getRefs (rootSelector) {\n        this.refs.timer = document.querySelector(`.${rootSelector}`);\n    },\n    convertMS (diff) {\n        const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n        const hours = Math.floor(diff / 1000 / 60 / 60) % 24;\n        const minutes = Math.floor(diff / 1000 / 60) % 60;\n        const seconds = Math.floor(diff / 1000) % 60;\n        return {\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds\n        };\n    },\n    updateTextContent (date) {\n        Object.entries(date).forEach(([key, value], index)=>{\n            this.refs.timer.children[index].textContent = this.addLeadingZero(value);\n            this.refs.timer.children[index].dataset.title = this.updateDataTitle(value, key);\n        });\n    },\n    addLeadingZero (value) {\n        return String(value).padStart(2, 0);\n    },\n    updateDataTitle (value, key) {\n        return this.datasetValues[key][value % 100 > 4 && value % 100 < 20 ? 2 : [\n            2,\n            0,\n            1,\n            1,\n            1,\n            2\n        ][value % 10 < 5 ? value % 10 : 5]];\n    }\n};\n$7e81353768b819eb$var$timer.start(\"timer__items\", \"2023-12-14\");\n\n\n//# sourceMappingURL=timer.e9804345.js.map\n","const timer = {\n  intervalId: null,\n  refs: {},\n  datasetValues: {\n    days: ['день', 'дня', 'днів'],\n    hours: ['година', 'години', 'годин'],\n    minutes: ['хвилина', 'хвилини', 'хвилин'],\n    seconds: ['секунда', 'секунди', 'секунд'],\n  },\n\n  start(rootSelector, targetDate) {\n    const target = new Date(targetDate);\n    let delta = target - Date.now();\n    if (delta <= 0) {\n      alert('Select date in future');\n      return;\n    }\n    this.getRefs(rootSelector);\n\n    this.intervalId = setInterval(() => {\n      delta = target - Date.now();\n      if (delta <= 0) {\n        alert('Success dedline');\n        clearInterval(this.intervalId);\n        return;\n      }\n      const date = this.convertMS(delta);\n      this.updateTextContent(date);\n    }, 1000);\n  },\n  getRefs(rootSelector) {\n    this.refs.timer = document.querySelector(`.${rootSelector}`);\n  },\n  convertMS(diff) {\n    const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n    const hours = Math.floor(diff / 1000 / 60 / 60) % 24;\n    const minutes = Math.floor(diff / 1000 / 60) % 60;\n    const seconds = Math.floor(diff / 1000) % 60;\n    return { days, hours, minutes, seconds };\n  },\n  updateTextContent(date) {\n    Object.entries(date).forEach(([key, value], index) => {\n      this.refs.timer.children[index].textContent = this.addLeadingZero(value);\n      this.refs.timer.children[index].dataset.title = this.updateDataTitle(\n        value,\n        key\n      );\n    });\n  },\n  addLeadingZero(value) {\n    return String(value).padStart(2, 0);\n  },\n\n  updateDataTitle(value, key) {\n    return this.datasetValues[key][\n      value % 100 > 4 && value % 100 < 20\n        ? 2\n        : [2, 0, 1, 1, 1, 2][value % 10 < 5 ? value % 10 : 5]\n    ];\n  },\n};\n\ntimer.start('timer__items', '2023-12-14');\n"],"names":["intervalId","refs","datasetValues","days","hours","minutes","seconds","start","rootSelector","targetDate","target","Date","delta","now","alert","getRefs","setInterval","clearInterval","date","convertMS","updateTextContent","timer","document","querySelector","diff","Math","floor","Object","entries","forEach","key","value","index","children","textContent","addLeadingZero","dataset","title","updateDataTitle","String","padStart"],"version":3,"file":"timer.e9804345.js.map"}